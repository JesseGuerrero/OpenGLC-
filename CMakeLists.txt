cmake_minimum_required(VERSION 3.22)
project(CPPOpenGL)

set(CMAKE_CXX_STANDARD 23)
include("D:/Other/New folder/vcpkg/scripts/buildsystems/vcpkg.cmake")
include_directories("include")

find_package(OpenGL REQUIRED)
find_package(GLUT REQUIRED)
find_package(assimp CONFIG REQUIRED)
find_package(GLEW REQUIRED)
find_package(glfw3 CONFIG REQUIRED)
find_package(glad CONFIG REQUIRED)
find_package(glm CONFIG REQUIRED)

macro (add_executable_and_libs _name)
    # invoke built-in add_executable
    _add_executable(${ARGV})
    if (TARGET ${_name})
        target_link_libraries(${_name} PRIVATE GLUT::GLUT)
        target_link_libraries(${_name} PRIVATE ${OPENGL_gl_LIBRARY})
        target_link_libraries(${_name} PRIVATE assimp::assimp)
        target_link_libraries(${_name} PRIVATE GLEW::GLEW)
        target_link_libraries(${_name} PRIVATE glad::glad)
        target_link_libraries(${_name} PRIVATE glfw)
        target_link_libraries(${_name} PRIVATE glm::glm)
    endif()
endmacro()


file(GLOB oldShaders "${CMAKE_CURRENT_BINARY_DIR}/Shaders/*.glsl")
file(REMOVE ${oldShaders})
file(GLOB oldImages "${CMAKE_CURRENT_BINARY_DIR}/Images/*")
file(REMOVE ${oldImages})

file(GLOB GLSL_FILES "${CMAKE_CURRENT_SOURCE_DIR}/GettingStarted/Shaders/*Dir/*.glsl")
file(COPY ${GLSL_FILES} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Shaders)
file(GLOB GLSL_FILES "GettingStarted/Images/*")
file(COPY ${GLSL_FILES} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Images)

add_executable_and_libs(01Window GettingStarted/01Window.cpp)
add_executable_and_libs(02Dot GettingStarted/02Dot.cpp)
add_executable_and_libs(02Dots GettingStarted/02Dots.cpp)
add_executable_and_libs(02DotsRandom GettingStarted/02DotsRandom.cpp)
add_executable_and_libs(02DotsRandomGLFW GettingStarted/02DotsRandomGLFW.cpp)
add_executable_and_libs(02Line GettingStarted/02Line.cpp)
add_executable_and_libs(02Lines GettingStarted/02Lines.cpp)
add_executable_and_libs(03Triangle GettingStarted/03Triangle.cpp)
add_executable_and_libs(03Triangles GettingStarted/03Triangles.cpp)
add_executable_and_libs(04Shaders GettingStarted/04Shaders.cpp)
add_executable_and_libs(05UniformVariable GettingStarted/05UniformVariable.cpp)
add_executable_and_libs(06Translation GettingStarted/06Translation.cpp)
add_executable_and_libs(07Rotation GettingStarted/07Rotation.cpp)
add_executable_and_libs(07RotationLine GettingStarted/07RotationLine.cpp)
add_executable_and_libs(07RotationDot GettingStarted/07RotationDot.cpp)
add_executable_and_libs(08Texture GettingStarted/08Texture.cpp)
add_executable_and_libs(08TextureLearnOpenGLSample GettingStarted/08TextureLearnOpenGLSample.cpp)
add_executable_and_libs(08TextureCubeRotate GettingStarted/08TextureCubeRotate.cpp)
add_executable_and_libs(08TextureTriangle GettingStarted/08TextureTriangle.cpp)
add_executable_and_libs(08TextureTriangleRotate GettingStarted/08TextureTriangleRotate.cpp)
add_executable_and_libs(08TextureTriangleLearnOpenGLSampleRotate GettingStarted/08TextureTriangleLearnOpenGLSampleRotate.cpp)
add_executable_and_libs(09Coordinates GettingStarted/09Coordinates.cpp)
add_executable_and_libs(09CoordinatesCube GettingStarted/09CoordinatesCube.cpp)
add_executable_and_libs(09CoordinatesCubes GettingStarted/09CoordinatesCubes.cpp)
add_executable_and_libs(10Camera GettingStarted/10Camera.cpp)
add_executable_and_libs(10CameraCrazyDots GettingStarted/10CameraCrazyDots.cpp)
add_executable_and_libs(10CameraStaticDots GettingStarted/10CameraStaticDots.cpp)
add_executable_and_libs(10CameraStaticLines GettingStarted/10CameraStaticLines.cpp)
#add_executable(08Texture 08Texture.cpp)
#target_link_libraries(08Texture PRIVATE GLUT::GLUT)
#target_link_libraries(08Texture PRIVATE ${OPENGL_gl_LIBRARY})
#target_link_libraries(08Texture PRIVATE assimp::assimp)
#target_link_libraries(08Texture PRIVATE GLEW::GLEW)
#target_link_libraries(08Texture PRIVATE glfw)
#target_link_libraries(08Texture PRIVATE glm::glm)
add_executable_and_libs(test2 test2.cpp)

